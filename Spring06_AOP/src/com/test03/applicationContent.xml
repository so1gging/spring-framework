<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

   <!-- 'proxy를 자동으로 생성하고 관리하겠다' 라는 의미 -->
   <aop:aspectj-autoproxy/>
   
   <!-- CC -->
   <bean id="man" class="com.test03.Man"></bean>
   <bean id="woman" class="com.test03.Woman"></bean>
   <bean id="myAspect" class="com.test03.MyAspect"></bean>
   
   <!-- 위에 생성된 bean을 통해 before와 after를 호출 -->
   <aop:config>
      <!-- 위에서 생성한 bean들 중에서 'myAspect'라는 id를 가진 bean을 참조한다.
         → 해당하는 bean에는 before() 메소드와 after() 메소드를 갖고 있는 클래스의 bean 객체이다. -->
      
      <aop:aspect ref="myAspect">
         <!-- 'myAspect'라는 bean에는 'before'라는 메소드와 'after'라는 메소드가 있다.
            'before'는 pointcut에 설정된 메소드가 실행되기전에 실행되게끔 해준다.
            'after'는 pointcut에 설정된 메소드가 실행된 후에 실행되게끔 해준다. -->
         <!-- pointcut에 넣어주기 위해 설정해준다.( 어떤 메소드가 실행되기 전에 실행될 것인가를 설정 ) -->
         <!-- pointcut: 어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식이다. -->
         <aop:before method="before" pointcut="execution( public * *( .. ) )"/>
         <!-- 핵심기능에 public * *(..) 이 실행되기 전!! -->
         <!-- 메서드 실행전에 적용되는 어드바이스를 정의 -->
         
         <aop:after method="after" pointcut="execution( public * *( .. ) )"/>
         <!-- 메서드가 정상적으로 실행되는지 또는 예외를 발생시키는지 여부에 상관없이 어드바이스를 정의 -->
         <!-- 여기서 pointcut에 해당하는 메소드는 Man 클래스와 Woman 클래스가 가지고 있는 메소드인 'public void classWork()'이다.
            execution( public * *( .. ) ) → 접근 지정자는 public, 리턴 타입과 클래스명은 아무거나 올 수 있고, 매개변수 또한 개수제한이 없다. -->
      </aop:aspect>
   </aop:config>

</beans>